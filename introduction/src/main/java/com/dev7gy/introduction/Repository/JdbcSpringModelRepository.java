package com.dev7gy.introduction.repository;

import com.dev7gy.introduction.model.SpringModel;
import org.springframework.jdbc.datasource.DataSourceUtils;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * sql spring_model
 * create table spring_model
 * (
 * id bigint generated by default as identity,
 * name varchar(255),
 * primary key (id)
 * );
 */
public class JdbcSpringModelRepository implements SpringModelRepository {
    private final DataSource dataSource;

    public JdbcSpringModelRepository(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    private Connection getConnection() {
        // DataSourceUtils를 이용해서 connection을 가져와야 한다.
        return DataSourceUtils.getConnection(dataSource);
    }

    private void close(Connection conn, PreparedStatement pstmt, ResultSet rs)
    {
        try {
            if (rs != null) {
                rs.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            if (pstmt != null) {
                pstmt.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            if (conn != null) {
                close(conn);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void close(Connection conn) throws SQLException {
        DataSourceUtils.releaseConnection(conn, dataSource);
    }

    @Override
    public SpringModel save(SpringModel springModel) {
        String sql = "insert into spring_model(name) values(?)";

        Connection conn = null;
        PreparedStatement pstmt = null;
        // 결과를 받는것.
        ResultSet rs = null;

        try {
            // connection을 가져온다.
            conn = getConnection();
            // sql을 넣어줌. - RETURN_GENERATED_KEYS: ID값이 insert를 시도해야 받을 수 있기 때문에 사용하는 옵션
            pstmt = conn.prepareStatement(sql,
                    Statement.RETURN_GENERATED_KEYS);
            // parameterIndex: 1의 의미는 "insert into member(name) values(?)"문장에서 ?에 매칭됨.
            pstmt.setString(1, springModel.getName());

            // DB에 실제 쿼리가 날라감.
            pstmt.executeUpdate();
            // Statement.RETURN_GENERATED_KEYS 옵션을 설정해뒀기 때문에 rs로 반환 받을 수 있음.
            rs = pstmt.getGeneratedKeys();

            if (rs.next()) {
                springModel.setId(rs.getLong(1));
            } else {
                throw new SQLException("id 조회 실패");
            }
            return springModel;
        } catch (Exception e) {
            throw new IllegalStateException(e);
        } finally {
            close(conn, pstmt, rs);
        }
    }

    @Override
    public Optional<SpringModel> findById(Long id) {
        String sql = "select * from spring_model where id = ?";
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            conn = getConnection();
            pstmt = conn.prepareStatement(sql);
            pstmt.setLong(1, id);
            rs = pstmt.executeQuery();
            if(rs.next()) {
                SpringModel springModel = new SpringModel();
                springModel.setId(rs.getLong("id"));
                springModel.setName(rs.getString("name"));
                return Optional.of(springModel);
            } else {
                return Optional.empty();
            }
        } catch (Exception e) {
            throw new IllegalStateException(e);
        } finally {
            close(conn, pstmt, rs);
        }

    }

    @Override
    public Optional<SpringModel> findByName(String name) {
        String sql = "select * from spring_model where name = ?";
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            conn = getConnection();
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, name);
            rs = pstmt.executeQuery();
            if(rs.next()) {
                SpringModel springModel = new SpringModel();
                springModel.setId(rs.getLong("id"));
                springModel.setName(rs.getString("name"));
                return Optional.of(springModel);
            }
            return Optional.empty();
        } catch (Exception e) {
            throw new IllegalStateException(e);
        } finally {
            close(conn, pstmt, rs);
        }
    }

    @Override
    public List<SpringModel> findAll() {
        String sql = "select * from spring_model";
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            conn = getConnection();
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();
            List<SpringModel> springModels = new ArrayList<>();
            while(rs.next()) {
                SpringModel springModel = new SpringModel();
                springModel.setId(rs.getLong("id"));
                springModel.setName(rs.getString("name"));
                springModels.add(springModel);
            }
            return springModels;
        } catch (Exception e) {
            throw new IllegalStateException(e);
        } finally {
            close(conn, pstmt, rs);
        }
    }
}
